Задание 7. Магазинное обобщение
В этом задании будем описывать магазин с товарами и складами.

Создайте абстрактный класс ShopItem с полями: название товара и цена продажи.
Создайте два наследника:
- ElectronicItem: дополнительное поле потребляемая мощность.
- FoodItem: дополнительное поля калорийность и срок годности в днях.


Создайте классы, описывающие конкретные товары, с дополнительными свойствами:
- TV. Дополнительное свойство -  громкость
- Refrigerator. Дополнительное свойство - объем морозильной камеры

- Apple.Дополнительное свойство - цвет
- Bread. Дополнительное свойство - вес  в граммах


Создайте четыре магазина магазина. Магазин - это просто типизированная коллекция, которая хранит товары определенного типа:
- Гипермаркет - хранит любые товары. Collection<ShopItem>
- Магазин электронной продукции - торгует только электроникой. Collection<ElectronicItem>
- Продуктовый магазин - торгует продуктами Collection<FoodItem>
- Ларек с яблоками у дома - торгует только яблоками.  Collecion<Apple>

Обратите внимание, магазины нужно создавать именно коллекцией, а не отдельным классом (у нас же задание на generics)
Или, если хотите - можете отнаследоваться от типизированного класса:
class AppleShop extends ArrayList<Apple> {
...
}

Создайте интерфейс ShopVisitor с единственным методом
void visitShop, на вход он принимает "магазин",т.е. какую-то коллекцию, содержащую ShopItem или его наследником.

Создайте три конкретных посетителя:
- ImJustLookingVisitor - который просто смотрит товары и выводит их на консоль в формате Название - цена
- ElectronicAddictedVisitor - который выводит на экран всю электронику.
После вывода такой посетитель покупает электронный товар с самой большой потребляемой мощностью.
"Покупает" - значит на экран выводится надпись "имя_товара куплен по цена_товара" и товар удаляется из коллекции.
- RichVisitor - который покупает каждый второй товар в магазине.

Теперь у нас есть магазины, есть покупатели, но нет товаров, только их описания.
Создадим несколько фабрик по производству товаров.

ElectronicFabric - с методом fillShopWithElectronicGoods. На вход передается коллекция(магазин) которую нужно заполнить.
В эту коллекцию нужно добавить несколько холодильников или телевизоров с разными свойствами и вывести на экран
"В магазин добавлена электроника: список_товаров"

Заполните следующие магазины товарами, используя ElectronicFabric:
- Гипермаркет
-Магазин электронной продукции
Обратите внимание, что если попытаться вызвать
ElectronicFabric.fillShopWithElectronicGoods(магазин_с_яблоками или продуктовый_магазин) - ошибка компиляции

AppleGarden - с методом fillShopWithApples. На вход передается коллекция(магазин) которую нужно заполнить.
В эту коллекцию нужно добавить яблок разных цветов. Вывести на экран
"В магазин добавлены яблоки: список_цветов"

Заполните следующие магазины товарами, используя AppleGarden:
- Продуктовый магазин
- Ларек с яблоками у дома
- Гипермаркет

Обратите внимание, что если попытаться вызвать
AppleGarden.fillShopWithApples(магазин_электроники) - ошибка компиляции


FoodFactory - с методом fillShopWithFood. На вход передается коллекция(магазин) которую нужно заполнить.
В эту коллекцию нужно добавить немного яблок и немного хлеба. Вывести на экран
"В магазин добавлены яблоки: список_цветов и хлеба, общим весом: вес_в_граммах"

Заполните следующие магазины товарами, используя FoodFactory:
- Продуктовый магазин
- Гипермаркет

Обратите внимание, что если попытаться вызвать
FoodFactory.fillShopWithFood(магазин_электроники) - ошибка компиляции
FoodFactory.fillShopWithFood(ларек_с_яблоками) - ошибка компиляции (Владелец ларька очень расстроится, если под видом яблок купят хлеб)


Создайте трех посетителей разных классов и пусть они погуляют по всем магазинам.