Аннотированная де\сериализация.

Создайте метод String serialize(Collection<?> object), который может записывать любые объекты в формате XML(или JSON, или YAML, если вам так больше нравится):
- Объект начинается с тэга, описывающий имя класса.
- Свойства объектов заключаются в открывающие и закрывающие тэги

- Создайте аннотацию @XmlName, чтобы определять имя свойства
- Создайте аннотацию @XmlIgnore, чтобы исключить поля из сериализации
- Создайте аннотацию @XmlTypeName, чтобы определять имя объекта контейнера

Например, класс
@XmlTypeName("Человек")
class Person {

    @XmlName("Имя")
    String firstName="Vasya";

    @XmlName("Возраст")
    double age=12

    @XmlIgnore
    String password;
}

будет выглядеть так
<Человек>
    <Имя>Vasya</Имя>
    <Возраст>12</Возраст>
</Человек>


Создайте класс, который может читать любой объект в формате XML.
например ,deserialize(<пример выше>, Person.class) вернет экземпляр Person{name="Vasya",age=12,password=null}


Создайте несколько объектов разных классов, запишите и прочитайте их из XML.

Для простоты реализации договоримся, что сериализоваться\десериализоваться будут только поля следующих типов: строки, числа, Boolean.
Вложенные сложные объекты(коллекции и типы отличные от строк, чисел, boolean)  можно игнорировать.
Для того, чтобы класс был сериализуемым - обязательно, чтобы у него был конструктор без параметров.
