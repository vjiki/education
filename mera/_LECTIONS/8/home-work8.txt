Лямбда-выражения и потоки

Задание 1.
создайте класс Person  с полями
 имя:String,
 возраст:int

 Создайте коллекцию людей
 Отсортируйте коллекцию сначала по имени, выведите на экран
  Затем - по возрасту, выведите на экран.


Для сортировки используйте Collections.sort(collection, comparator)
компаратор задайте в виде лямбда выражения или method reference


Задание 2.Расширяемый калькулятор
Создать класс Calculator, который может выполнять операции на двумя числами.
определить метод calculate(String operationName, Double number1, Double number2);

Операции могут быть разными и хранятся внутри калькулятора.

Определите интерфейс
interface Operation {
       Double doOperation(Double number1, Double number2) throw ArithmeticException;
 }
(или используйте подходящий интерфейс из java.util.function)

 в классе калькудятор создайте метод, который добавляет новыую операцию в калькулятор:
 void addOperation(String operationName, Operation implementation);

 Добавьте в калькулятор операции:
 Умножение
 Деление
 Сложение
 Вычитание
 Возведение в степень
 Извлечение корня степени n

 Для опредления тела операции используйте лямбда выражения
 Например:
 Calculator calc = new Calculator();
 calc.add("sum", (a,b) -> a+b);
 calc.calculate("sum",2,3);// выводит 5


Задание 3. Потоковые лекции

Создайте класс Lection с полями : название, дата проведения. Описывает лекцию по какой-то дисциплине в определенную дату.
В качестве даты можете использовать LocalDate, используя конструктор LocalDate.of
Создайте класс Student с полями имя (строка) и список посещенных курсов в формате Set<Lection>.
Создайте List<Student> students и заполните его 10 студентами, которые посетили 5 разных курсов (матанализ,философия, английкий язык, история, физкультура).
Количество посещений придумайте самостоятельно.

Теперь проведем аналитику:
Для всех заданий используй students.stream() и операции с потоками.

1. Выведите список студентов, которые хоть раз посещали матанализ.
2. Выведите статистику посещений для каждого студентам в формате: имя - количество посщенных лекций.
3. Выведите название дисциплин, имеющих наибольшее количество посещений.
Если два разных студента посещают одну лекцию в один день, то это считается как два посещения.
4. Выведите имена студентов, которые посетили наибольшее количество лекций в день.
5. Выведите статистику по курсам в формате:
название курсов - количество разных студентов, которые посетили хотя бы одно занятие. (т.е. в лучшем случае это будет 10)

 Обратите внимание, что большинство заданий не предполагает "однострочного" решения цепочкой stream'ов.
 Где-то придется заводить временные переменные или методы.
 не забывайте, что логика по работе лежит не только в классе Stream, но еще Collectors, в частности, полезным может оказаться
 grouppingBy с дополнительным коллектором-downstream или классы Collections.max/min